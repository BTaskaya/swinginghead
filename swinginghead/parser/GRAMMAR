start: (expr)*
?expr: pointer | literal | funcdecl | operation | local_name | equality | returns | comparison | ifdecl

equality: CNAME "eqs" (operation | literal) 
operation: expr OPERATOR expr
comparison: expr ">" COMPARATOR "<" expr

returns: "./" expr

ifdecl: "|" comparison "|" "=>"  suite ["!=>" suite]
suite:  "{" (expr)* "}"

funcdecl: functypedecl CNAME "{" (expr)* "}"
functypedecl: "swing" typedecl "$" typedecl? ("â‚¬" typedecl)* "$"

pointer: "<-" literal
literal: ("(" typedecl "->" (ATOM | seq) ")")
local_name: "," (SIGNED_NUMBER | CNAME)

typedecl: "`" CNAME ("<" meta ("," meta)* ">")? "`"
meta: SIGNED_NUMBER | typedecl

seq: "@" ATOM? ("~" ATOM)* "@"
ATOM: SIGNED_NUMBER | "void"
OPERATOR: ("f")? ("+" | "-" | "*" | "/")
COMPARATOR: ("i" | "f") " " ("signed" | "unsigned" | "ordered" | "unordered") " " ("lt" | "gt" | "eq" | "ge" | "le" | "ne")
END: ";"

%import common.CNAME
%import common.SIGNED_NUMBER
%import common.WS
%ignore WS
